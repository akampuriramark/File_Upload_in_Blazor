@page "/"
@using File_Upload_in_Blazor.Services;
@inject IFileUpload fileUpload;

<div class="col-6">
    <h1>File Upload in Blazor</h1>
    <div class="form-group">
        <InputFile OnChange="OnInputFileChange" multiple />
        <button class="btn btn-sm btn-success" type="button" @onclick="UploadFiles">Upload</button>
        <br />
        @{
            // generate progress css class basing on whether display propgress is set.
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            // progress bar width is the percentage of upload progress
            var progressWidthStyle = progressPercent + "%";
        }
        <div class="@progressCss">
            <div class="progress-bar" role="progressbar" style="width:@progressWidthStyle" area-valuenow="@progressPercent"
                 aria-minvalue="0" area-maxvalue="100">

            </div>
        </div>
    </div>
    <br />
    <label>@labelText</label>
    <br />
</div>
@if (previewImages.Count > 0)
{
    <h3>Selected files</h3>
    <div class="card">
        <div class="row align-items-start">
      
            @foreach (var item in previewImages)
            {
                <div class="col-2">
                    <img class="rounded float-left" src="@item" width="100" height="100"/>
                </div>
            }
        </div>
    </div>

}

@code{
    // display progress only when uploading
    private bool displayProgress;
    // upload progress in percentage
    private int progressPercent;
    // Show results of the upload
    private string labelText = "";

    // list of selected files to upload
    IReadOnlyList<IBrowserFile> selectedFiles;
    // list of preview urls for the files
    private IList<string> previewImages = new List<string>();

    // method automatically executed when there's a new selection in files to upload
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        // Get all files selected in the file picker
        var files = e.GetMultipleFiles();
        selectedFiles = files;
        foreach (var file in files)
        {
            // generate preview url for the image file
            var imageUrl = await fileUpload.GeneratePreviewUrl(file);

            // add file the image url to the preview url list
            previewImages.Add(imageUrl);

        }
    }

    private async Task UploadFiles()
    {
        try
        {
            if (selectedFiles is not null && selectedFiles.Count > 0)
            {
                // keep track of uploaded files
                var uploaded = 0;
                // Enable upload progress
                displayProgress = true;

                foreach (var file in selectedFiles)
                {
                    // asynchronously upload the file
                    await fileUpload.UploadFile(file);

                    // inreament the uploaded count after successful upload
                    uploaded++;

                    // update the progress of upload
                    progressPercent = (int)((uploaded / selectedFiles.Count) * 100);
                }

                // disable upload progress view
                displayProgress = false;

                // Upload has been successful, notify user.
                labelText = $"Upload of {selectedFiles.Count} files Successful";
            }
        }
        catch (Exception ex)
        {
            //Upload failed due to some reason, notify user.
            labelText = $"Upload Failed due to {ex.Message}";
        }

    }
}